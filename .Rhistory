cat("Three 48-hour windows with worst arrival delays:\n")
print(worst_arr_delays)
cat("Three 48-hour windows with worst departure delays:\n")
print(worst_dep_delays)
# Convert year, month, day, and hour columns to a POSIXct object
weather <- weather %>%
mutate(time_hour = as.POSIXct(paste(year, month, day, hour, sep = "-"),
format = "%Y-%m-%d-%H"))
flights_weather <- flights %>%
left_join(weather, by = c("origin", "time_hour"))
flights_weather |> print()
# Create a new column with the 48-hour time window for each observation
flights_weather <- flights_weather %>%
mutate(window = cut(time_hour, breaks = "2 days", labels = FALSE))
# View the resulting data set
flights_weather |> print()
# Group the data set by window and calculate the mean delay time for each window
window_delays <- flights_weather %>%
group_by(window) %>%
summarize(avg_delay = mean(arr_delay, na.rm = TRUE))
# Select the top three windows with the highest average delay times
worst_windows <- window_delays %>%
top_n(3, avg_delay)
# Cross-reference the worst windows with the corresponding dates
worst_dates <- flights_weather %>%
filter(window %in% worst_windows$window) %>%
select(window, time_hour, avg_delay = arr_delay) %>%
distinct()
# View the resulting data set
worst_dates |> print()
# Create a scatter plot of delay times versus temperature
flights_weather %>%
ggplot(aes(x = temp, y = arr_delay)) +
geom_point(alpha = 0.5) +
labs(x = "Temperature (F)", y = "Arrival Delay (min)") +
theme_minimal()
top_dest <- nycflights13::flights |> count(dest, sort = TRUE) |> head(10)
# Get top 10 destinations
top_dest <- flights %>%
count(dest, sort = TRUE) %>%
head(10)
# Join flights with top 10 destinations
flights_top_dest <- flights %>%
semi_join(top_dest, by = "dest")
# View resulting data frame
flights_top_dest
# Get top 10 destinations
top_dest <- flights %>%
count(dest, sort = TRUE) %>%
head(10) %>%
pull(dest)
# Filter flights to top 10 destinations
flights_top_dest <- flights %>%
filter(dest %in% top_dest)
# View resulting data frame
flights_top_dest
# Create a data frame with the top 10 destinations
top_dest <- nycflights13::flights %>%
dplyr::count(dest, sort = TRUE) %>%
dplyr::slice_head(n = 10)
# Subset flights to the top 10 destinations
flights_top_dest <- subset(nycflights13::flights, dest %in% top_dest$dest)
# View the resulting data frame
flights_top_dest
# Count the number of departing flights for each unique combination of time_hour and origin
flights_count <- flights %>%
filter(!is.na(dep_time)) %>% # Remove flights with missing departure time
mutate(time_hour = as.POSIXct(paste(year, month, day, hour, sep = "-"), format = "%Y-%m-%d-%H")) %>%
group_by(time_hour, origin) %>%
summarise(n_flights = n())
# Count the number of rows in the flights_weather data frame for each unique combination of time_hour and origin
weather_count <- flights_weather %>%
group_by(time_hour, origin) %>%
summarise(n_weather = n())
# Merge the two data frames and check if the number of flights matches the number of weather observations for each combination of time_hour and origin
merge(flights_count, weather_count, by = c("time_hour", "origin")) %>%
mutate(mismatch = n_flights != n_weather)
flights %>%
filter(is.na(tailnum), !is.na(arr_time)) %>%
nrow()
flights %>%
filter(is.na(tailnum), !is.na(dep_time)) %>%
nrow()
carriers_by_planes <-
flights %>%
filter(!is.na(tailnum)) %>%
distinct(tailnum, carrier)
carriers_by_planes |> print()
carriers_by_planes %>%
count(tailnum) %>%
filter(n > 1) %>%
nrow()
locations_by_airports <- airports %>%
select(faa, lat, lon)
flights %>%
select(year:day, hour, origin, dest) %>%
left_join(locations_by_airports,by = c("origin" = "faa")) %>%
left_join(locations_by_airports, by = c("dest" = "faa"),
suffix = c("_origin", "_dest")) %>% print()
locations_by_airports <- airports %>%
select(faa, lat, lon)
flights %>%
select(year:day, hour, origin, dest) %>%
left_join(locations_by_airports,by = c("origin" = "faa")) %>%
left_join(locations_by_airports, by = c("dest" = "faa"),
suffix = c("_origin", "_dest")) %>% print()
avg_delays_by_dest <- flights %>%
group_by(dest) %>%
summarize(avg_delay = mean(arr_delay, na.rm = TRUE))
avg_delays_by_dest <- flights %>%
group_by(dest) %>%
summarize(avg_delay = mean(arr_delay, na.rm = TRUE)) %>% print()
joined_by_airports <-
flights %>%
group_by(dest) %>%
summarise(delay = mean(arr_delay, na.rm = TRUE)) %>%
inner_join(airports, by = c(dest = "faa")) %>% print()
airports |>
semi_join(flights, join_by(faa == dest)) |> ggplot(aes(x = lon, y = lat)) +
borders("state") + geom_point() + coord_quickmap()
airports |>
semi_join(flights, join_by(faa == dest)) |> ggplot(aes(x = lon, y = lat)) +
borders("state") + geom_point() + coord_quickmap()
avg_dest_delays %>%
ggplot(aes(lon, lat, colour = delay)) +
borders("state") +
geom_point() +
coord_quickmap()
airports |>
semi_join(flights, join_by(faa == dest)) |> ggplot(aes(x = lon, y = lat)) +
borders("state") + geom_point() + coord_quickmap()
avg_delays_by_dest %>%
ggplot(aes(lon, lat, colour = delay)) +
borders("state") +
geom_point() +
coord_quickmap()
airports |>
semi_join(flights, join_by(faa == dest)) |> ggplot(aes(x = lon, y = lat)) +
borders("state") + geom_point() + coord_quickmap()
library(ggplot2)
library(dplyr)
library(maps)
joined_by_airports <-
flights %>%
group_by(dest) %>%
summarise(delay = mean(arr_delay, na.rm = TRUE)) %>%
inner_join(airports, by = c(dest = "faa"))
# Exclude airports in Alaska and Hawaii
joined_by_airports_filtered <- joined_by_airports %>%
filter(lat >= 24.6 & lat <= 49.4)
# Use point size to display the average delay for each airport
ggplot(joined_by_airports_filtered, aes(x = lon, y = lat, size = delay)) +
borders("state") +
geom_point(color = "red", alpha = 0.7) +
coord_quickmap() +
scale_size_continuous(range = c(1, 10)) +
labs(title = "Average Flight Delay by Airport (Excluding Alaska and Hawaii)",
subtitle = "Size of the point indicates the average delay in minutes") +
theme(plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 14))
# Exclude airports in Alaska and Hawaii
joined_by_airports_filtered <- joined_by_airports %>%
filter(lat >= 24.6 & lat <= 49.4)
# Use point size to display the average delay for each airport
ggplot(joined_by_airports_filtered, aes(x = lon, y = lat, size = delay)) +
borders("state") +
geom_point(color = "red", alpha = 0.7) +
coord_quickmap() +
scale_size_continuous(range = c(1, 10)) +
labs(title = "Average Flight Delay by Airport (Excluding Alaska and Hawaii)",
subtitle = "Size of the point indicates the average delay in minutes") +
theme(plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 14))
flights %>%
filter(year == 2013, month == 6, day == 13) %>%
group_by(dest) %>%
summarise(delay = mean(arr_delay, na.rm = TRUE)) %>%
inner_join(airports, by = c("dest" = "faa")) %>%
ggplot(aes(y = lat, x = lon, size = delay, colour = delay)) +
borders("state") +
geom_point() +
coord_quickmap() +
scale_colour_viridis()
flights %>%
filter(year == 2013, month == 6, day == 13) %>%
group_by(dest) %>%
summarise(delay = mean(arr_delay, na.rm = TRUE)) %>%
inner_join(airports, by = c("dest" = "faa")) %>%
ggplot(aes(y = lat, x = lon, size = delay, colour = delay)) +
borders("state") +
geom_point() +
coord_quickmap() +
scale_colour_gradient(low = "blue", mid = "white", high = "red", limits = c(-30, 60))
flights %>%
filter(year == 2013, month == 6, day == 13) %>%
group_by(dest) %>%
summarise(delay = mean(arr_delay, na.rm = TRUE)) %>%
inner_join(airports, by = c("dest" = "faa")) %>%
ggplot(aes(y = lat, x = lon, size = delay, colour = delay)) +
borders("state") +
geom_point() +
coord_quickmap() +
scale_colour_manual(values = c("#1a9641", "#a6d96a", "#ffffbf", "#fdae61", "#d7191c"),
breaks = c(-30, -10, 0, 10, 30))
flights %>%
filter(year == 2013, month == 6, day == 13) %>%
group_by(dest) %>%
summarise(delay = mean(arr_delay, na.rm = TRUE)) %>%
inner_join(airports, by = c("dest" = "faa")) %>%
ggplot(aes(y = lat, x = lon, size = delay, colour = delay)) +
borders("state") +
geom_point() +
coord_quickmap() +
scale_colour_gradient(low = "blue", mid = "white", high = "red", limits = c(-30, 60))
flights %>%
filter(year == 2013, month == 6, day == 13) %>%
group_by(dest) %>%
summarise(delay = mean(arr_delay, na.rm = TRUE)) %>%
inner_join(airports, by = c("dest" = "faa")) %>%
ggplot(aes(y = lat, x = lon, size = delay, colour = delay)) +
borders("state") +
geom_point() +
coord_quickmap() +
scale_colour_gradient(low = "blue", high = "red", midpoint = 0, limits = c(-30, 60))
flights %>%
filter(year == 2013, month == 6, day == 13) %>%
group_by(dest) %>%
summarise(delay = mean(arr_delay, na.rm = TRUE)) %>%
inner_join(airports, by = c("dest" = "faa")) %>%
ggplot(aes(y = lat, x = lon, size = delay, colour = delay)) +
borders("state") +
geom_point() +
coord_quickmap() +
scale_colour_viridis()
flights %>%
filter(year == 2013, month == 6, day == 13) %>%
group_by(dest) %>%
summarise(delay = mean(arr_delay, na.rm = TRUE)) %>%
inner_join(airports, by = c("dest" = "faa")) %>%
ggplot(aes(y = lat, x = lon, size = delay, colour = delay)) +
borders("state") +
geom_point() +
coord_quickmap() +
scale_colour_gradient(low = "blue", high = "red", midpoint = 0, limits = c(-30, 60))
flights %>%
filter(year == 2013, month == 6, day == 13) %>%
group_by(dest) %>%
summarise(delay = mean(arr_delay, na.rm = TRUE)) %>%
inner_join(airports, by = c("dest" = "faa")) %>%
ggplot(aes(y = lat, x = lon, size = delay, colour = delay)) +
borders("state") +
geom_point() +
coord_quickmap() +
scale_colour_gradient(low = "blue", high = "red", mid = 0, limits = c(-30, 60))
flights %>%
filter(year == 2013, month == 6, day == 13) %>%
group_by(dest) %>%
summarise(delay = mean(arr_delay, na.rm = TRUE)) %>%
inner_join(airports, by = c("dest" = "faa")) %>%
ggplot(aes(y = lat, x = lon, size = delay, colour = delay)) +
borders("state") +
geom_point() +
coord_quickmap() +
scale_color_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0, limits = c(-30, 60))
flights %>%
filter(year == 2013, month == 6, day == 13) %>%
group_by(dest) %>%
summarise(delay = mean(arr_delay, na.rm = TRUE)) %>%
inner_join(airports, by = c("dest" = "faa")) %>%
ggplot(aes(y = lat, x = lon, size = delay, colour = delay)) +
borders("state") +
geom_point() +
coord_quickmap() +
scale_colour_viridis()
library(dplyr)
library(nycflights13)
flights <- nycflights13::flights
flights %>%
mutate(delay = arr_time - sched_arr_time) %>%
arrange(origin, dest, year, month, day, sched_dep_time) %>%
group_by(origin, dest, year, month, day) %>%
mutate(prev_delay = delay - lag(delay))
flights %>%
arrange(origin, dest, year, month, day, sched_dep_time) %>%
group_by(origin, dest, year, month, day) %>%
mutate(delay = arr_time - sched_arr_time) %>%
mutate(prev_delay = arr_delay - lag(arr_delay)) %>%
ggplot(aes(x = prev_delay, y = arr_delay)) +
geom_bin2d(bins = 50) +
scale_fill_viridis(option = "plasma") +
labs(x = "Delay of Previous Flight", y = "Delay of Current Flight",
title = "Relationship between Flight Delays") +
theme_minimal()
# Compute median air time for each destination
dest_median_air_time <- flights %>%
group_by(dest) %>%
summarise(median_air_time = median(air_time, na.rm = TRUE))
# Compute air time relative to median air time for each destination
flights_with_rel_air_time <- flights %>%
inner_join(dest_median_air_time, by = "dest") %>%
mutate(rel_air_time = air_time / median_air_time)
# Find the 10 most delayed flights in the air
flights_with_rel_air_time %>%
arrange(desc(rel_air_time)) %>%
head(10) %>%
select(year, month, day, dep_time, arr_time, origin, dest, air_time,
rel_air_time)
flights %>%
arrange(tailnum, year, month, day, sched_dep_time) %>%
mutate(delay = dep_delay > 60) %>%
mutate(flights_before_delay = cumsum(!delay)) %>%
group_by(tailnum) %>%
summarise(total_flights_before_delay = max(flights_before_delay, na.rm = TRUE)) %>%
filter(total_flights_before_delay > 0)
# Convert the scheduled departure time to a numeric value representing the hour of the day
flights$hour <- floor(as.numeric(format(flights$sched_dep_time, "%H%M")) / 100)
# Convert the scheduled departure time to a numeric value representing the hour of the day
flights$hour <- floor(flights$sched_dep_time / 100)
# Create a new column with the date and hour rounded down to the nearest 48-hour window
flights$window <- as.POSIXct(cut(as.POSIXct(paste(flights$year, flights$month, flights$day, flights$hour, "00", "00", sep="-")), breaks="48 hours"), format="%Y-%m-%d %H:%M:%S")
# Group the flights by origin, window, and hour, and compute the mean departure delay
worst_hours <- flights %>%
group_by(origin, window, hour) %>%
summarise(dep_delay = mean(dep_delay, na.rm = TRUE)) %>%
ungroup() %>%
arrange(desc(dep_delay)) %>%
slice(1:48)
# Convert the scheduled departure time to a numeric value representing the hour of the day
flights$hour <- floor(flights$sched_dep_time / 100)
# Create a new column with the date and hour rounded down to the nearest 48-hour window
flights$window <- as.POSIXct(cut(as.POSIXct(paste(flights$year, flights$month, flights$day, flights$hour, "00", "00", sep="-")), breaks="48 hours"), format="%Y-%m-%d %H:%M:%S")
# Group the flights by origin, window, and hour, and compute the mean departure delay
worst_hours <- flights %>%
group_by(origin, window, hour) %>%
summarise(dep_delay = mean(dep_delay, na.rm = TRUE)) %>%
ungroup() %>%
arrange(desc(dep_delay)) %>%
slice(1:48) %>% print()
# Convert the scheduled departure and arrival times to date-time format
flights$sched_dep_time <- as.POSIXct(sprintf("%04d", flights$sched_dep_time),
format="%H%M", tz="UTC")
flights$sched_arr_time <- as.POSIXct(sprintf("%04d", flights$sched_arr_time),
format="%H%M", tz="UTC")
# Create a new column with the date rounded down to the nearest 48-hour window
flights$window <- as.POSIXct(cut(as.POSIXct(paste(flights$year,
flights$month,
flights$day,
"00", "00", "00",
sep="-")),
breaks="48 hours"),
format="%Y-%m-%d %H:%M:%S")
# Compute the mean arrival and departure delays for each 48-hour window
delays <- flights %>%
group_by(window) %>%
summarise(mean_arr_delay = mean(arr_delay, na.rm = TRUE),
mean_dep_delay = mean(dep_delay, na.rm = TRUE)) %>%
ungroup()
# Find the three 48-hour windows with the worst arrival delays
worst_arr_delays <- delays %>%
arrange(desc(mean_arr_delay)) %>%
slice(1:3)
# Find the three 48-hour windows with the worst departure delays
worst_dep_delays <- delays %>%
arrange(desc(mean_dep_delay)) %>%
slice(1:3)
# Print the results
cat("Three 48-hour windows with worst arrival delays:\n")
print(worst_arr_delays)
cat("Three 48-hour windows with worst departure delays:\n")
print(worst_dep_delays)
# Convert year, month, day, and hour columns to a POSIXct object
weather <- weather %>%
mutate(time_hour = as.POSIXct(paste(year, month, day, hour, sep = "-"),
format = "%Y-%m-%d-%H"))
flights_weather <- flights %>%
left_join(weather, by = c("origin", "time_hour"))
flights_weather |> print()
# Create a new column with the 48-hour time window for each observation
flights_weather <- flights_weather %>%
mutate(window = cut(time_hour, breaks = "2 days", labels = FALSE))
# View the resulting data set
flights_weather |> print()
# Group the data set by window and calculate the mean delay time for each window
window_delays <- flights_weather %>%
group_by(window) %>%
summarize(avg_delay = mean(arr_delay, na.rm = TRUE))
# Select the top three windows with the highest average delay times
worst_windows <- window_delays %>%
top_n(3, avg_delay)
# Cross-reference the worst windows with the corresponding dates
worst_dates <- flights_weather %>%
filter(window %in% worst_windows$window) %>%
select(window, time_hour, avg_delay = arr_delay) %>%
distinct()
# View the resulting data set
worst_dates |> print()
# Create a scatter plot of delay times versus temperature
flights_weather %>%
ggplot(aes(x = temp, y = arr_delay)) +
geom_point(alpha = 0.5) +
labs(x = "Temperature (F)", y = "Arrival Delay (min)") +
theme_minimal()
# Get top 10 destinations
top_dest <- flights %>%
count(dest, sort = TRUE) %>%
head(10)
# Join flights with top 10 destinations
flights_top_dest <- flights %>%
semi_join(top_dest, by = "dest")
# View resulting data frame
flights_top_dest
# Get top 10 destinations
top_dest <- flights %>%
count(dest, sort = TRUE) %>%
head(10) %>%
pull(dest)
# Filter flights to top 10 destinations
flights_top_dest <- flights %>%
filter(dest %in% top_dest)
# View resulting data frame
flights_top_dest
# Create a data frame with the top 10 destinations
top_dest <- nycflights13::flights %>%
dplyr::count(dest, sort = TRUE) %>%
dplyr::slice_head(n = 10)
# Subset flights to the top 10 destinations
flights_top_dest <- subset(nycflights13::flights, dest %in% top_dest$dest)
# View the resulting data frame
flights_top_dest
# Count the number of departing flights for each unique combination of time_hour and origin
flights_count <- flights %>%
filter(!is.na(dep_time)) %>% # Remove flights with missing departure time
mutate(time_hour = as.POSIXct(paste(year, month, day, hour, sep = "-"), format = "%Y-%m-%d-%H")) %>%
group_by(time_hour, origin) %>%
summarise(n_flights = n())
# Count the number of rows in the flights_weather data frame for each unique combination of time_hour and origin
weather_count <- flights_weather %>%
group_by(time_hour, origin) %>%
summarise(n_weather = n())
# Merge the two data frames and check if the number of flights matches the number of weather observations for each combination of time_hour and origin
merge(flights_count, weather_count, by = c("time_hour", "origin")) %>%
mutate(mismatch = n_flights != n_weather)
flights %>%
filter(is.na(tailnum), !is.na(arr_time)) %>%
nrow()
flights %>%
filter(is.na(tailnum), !is.na(dep_time)) %>%
nrow()
carriers_by_planes <-
flights %>%
filter(!is.na(tailnum)) %>%
distinct(tailnum, carrier)
carriers_by_planes |> print()
carriers_by_planes %>%
count(tailnum) %>%
filter(n > 1) %>%
nrow()
locations_by_airports <- airports %>%
select(faa, lat, lon)
flights %>%
select(year:day, hour, origin, dest) %>%
left_join(locations_by_airports,by = c("origin" = "faa")) %>%
left_join(locations_by_airports, by = c("dest" = "faa"),
suffix = c("_origin", "_dest")) %>% print()
avg_delays_by_dest <- flights %>%
group_by(dest) %>%
summarize(avg_delay = mean(arr_delay, na.rm = TRUE)) %>% print()
joined_by_airports <-
flights %>%
group_by(dest) %>%
summarise(delay = mean(arr_delay, na.rm = TRUE)) %>%
inner_join(airports, by = c(dest = "faa")) %>% print()
# Exclude airports in Alaska and Hawaii
joined_by_airports_filtered <- joined_by_airports %>%
filter(lat >= 24.6 & lat <= 49.4)
# Use point size to display the average delay for each airport
ggplot(joined_by_airports_filtered, aes(x = lon, y = lat, size = delay)) +
borders("state") +
geom_point(color = "red", alpha = 0.7) +
coord_quickmap() +
scale_size_continuous(range = c(1, 10)) +
labs(title = "Average Flight Delay by Airport (Excluding Alaska and Hawaii)",
subtitle = "Size of the point indicates the average delay in minutes") +
theme(plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 14))
flights %>%
filter(year == 2013, month == 6, day == 13) %>%
group_by(dest) %>%
summarise(delay = mean(arr_delay, na.rm = TRUE)) %>%
inner_join(airports, by = c("dest" = "faa")) %>%
ggplot(aes(y = lat, x = lon, size = delay, colour = delay)) +
borders("state") +
geom_point() +
coord_quickmap() +
scale_color_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0, limits = c(-30, 60))
rm(list=ls())
install.packages("bigrquery")
library(bigrquery)
library(tidyverse)
billing_and_proj_id <- "ganong-teaching-343718"
sql <- "SELECT
*
FROM `waze-public-dataset.partner_UniversityofChicago.view_alerts_clustered`
WHERE city = 'Chicago, IL' AND date(ts) = '2023-02-01'"
tbl_waze <- bq_project_query(billing_and_proj_id, sql)
install.packages("readr")
library(readr)
dfw <- read_rds("/Users/mattida6/Desktop/GitHub/waze_data.rds")
install.packages("readr")
library(readr)
dfw <- read_rds("/Users/mattida6/Desktop/GitHub/waze_data.rds")
dfw <- read_rds("/Users/mattida6/Desktop/GitHub/waze_data.rds")
